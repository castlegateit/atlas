{"version":3,"sources":["header-fixed.js","header-nav-item-toggle.js","header-nav-toggle.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnfile":"atlas.js","sourcesContent":["// Fixed position header on scroll, using an empty spacer element to maintain\n// the vertical space that would normally be taken up by the static position\n// header only when the header has fixed position.\n$(function () {\n    var aperture = $(window);\n\n    var headerClass = ATLAS_PREFIX + 'header';\n    var spacerClass = ATLAS_PREFIX + 'header-fix';\n    var imageClass = headerClass + '__title-image';\n\n    var enabledModifier = '--fixed';\n    var fixedModifier = '--is-fixed';\n    var offsetModifier = '--is-offset';\n\n    var headerClassFixed = headerClass + fixedModifier;\n    var spacerClassFixed = spacerClass + fixedModifier;\n    var imageClassFixed = imageClass + fixedModifier;\n\n    var headerClassEnabled = headerClass + enabledModifier;\n    var headerClassOffset = headerClass + offsetModifier;\n\n    // Current resize or scroll state, resize or scroll complete event name, the\n    // limit (ms) for checking resize or scroll state, and the scroll threshold\n    // (px) for making the header fixed.\n    var resizing = false;\n    var resized = 'atlas.header_fixed.resize.done';\n    var limit = 10;\n    var threshold = 200;\n\n    // Blocks and elements.\n    var header = $('.' + headerClass);\n    var spacer = $('.' + spacerClass);\n    var image = $('.' + imageClass);\n\n    // No header? Fixed position disabled?\n    if (header.length === 0 || !header.hasClass(headerClassEnabled)) {\n        return;\n    }\n\n    // No spacer? Create one and insert it before the header element.\n    if (spacer.length === 0) {\n        spacer = $('<div class=\"' + spacerClass + '\">');\n        header.before(spacer);\n    }\n\n    // Wait until the window has finished resizing and/or scrolling, then\n    // trigger the \"done\" event.\n    aperture.on('resize scroll', function () {\n        window.clearTimeout(resizing);\n\n        resizing = window.setTimeout(function () {\n            aperture.trigger(resized);\n        }, limit);\n    });\n\n    // Add or remove the \"fixed\" modifier class on both the header and spacer\n    // elements on load and on resize or scroll complete.\n    aperture.on('load ' + resized, function () {\n        var toggle = aperture.scrollTop() > threshold;\n        var admin = $('#wpadminbar').length !== 0;\n\n        header.toggleClass(headerClassFixed, toggle);\n        header.toggleClass(headerClassOffset, toggle && admin);\n        spacer.toggleClass(spacerClassFixed, toggle);\n        image.toggleClass(imageClassFixed, toggle);\n    });\n});\n","// Second level navigation toggle on all screen sizes.\n$(function () {\n    // Block class names.\n    var headerClass = ATLAS_PREFIX + 'header';\n\n    // Element class names.\n    var navClass = headerClass + '__nav';\n\n    var navListClass = headerClass + '__nav-list';\n    var navItemClass = headerClass + '__nav-item';\n    var navLinkClass = headerClass + '__nav-link';\n\n    var wrapClass = headerClass + '__nav-item-toggle';\n    var buttonClass = headerClass + '__nav-item-toggle-button';\n\n    // Class name modifiers.\n    var defaultModifier = '--default';\n    var disabledModifier = '--item-toggle-disabled';\n    var hiddenModifier = '--item-hidden';\n    var toggleModifier = '--item-toggle';\n    var level1Modifier = '--level-1';\n    var level2Modifier = '--level-2';\n\n    // Full class names with modifiers applied.\n    var buttonClassDefault = buttonClass + defaultModifier;\n    var buttonClassHidden = buttonClass + hiddenModifier;\n    var navClassDisabled = navClass + disabledModifier;\n    var navListClassHidden = navListClass + hiddenModifier;\n    var navListClassToggle = navListClass + toggleModifier;\n    var navListClassLevel2 = navListClass + level2Modifier;\n\n    // Template elements.\n    var buttonTemplate = $('#' + ATLAS_PREFIX + 'nav-item-button-template');\n    var showTemplate = $('#' + ATLAS_PREFIX + 'nav-item-show-template');\n    var hideTemplate = $('#' + ATLAS_PREFIX + 'nav-item-hide-template');\n\n    // Elements.\n    var nav = $('.' + navClass);\n    var lists = $('.' + navListClassLevel2);\n    var items = lists.parent('.' + navItemClass);\n\n    // No navigation? No second level lists? Toggle disabled?\n    if (nav.length === 0 || lists.length === 0 || nav.hasClass(navClassDisabled)) {\n        return;\n    }\n\n    // Default button HTML.\n    var buttonHtml = '<a href=\"#\">';\n\n    // Template-based button HTML.\n    if (buttonTemplate.length !== 0) {\n        buttonHtml = buttonTemplate.html();\n    }\n\n    // Default show/hide second level content.\n    var showContent = '+ <span class=\"screen-reader-text\">show items</span>';\n    var hideContent = '&minus; <span class=\"screen-reader-text\">hide items</span>';\n\n    // Template-based show/hide second level content.\n    if (showTemplate.length !== 0) {\n        showContent = showTemplate.html();\n    }\n\n    if (hideTemplate.length !== 0) {\n        hideContent = hideTemplate.html();\n    }\n\n    // Function to get buttons, lists, etc. associated with particular item.\n    var getComponents = function (element) {\n        var item = $(element);\n\n        if (!item.hasClass(navItemClass)) {\n            item = item.closest('.' + navItemClass);\n        }\n\n        return {\n            item: item,\n            button: item.find('.' + buttonClass).first(),\n            list: item.find('.' + navListClass).first(),\n            others: items.not(item)\n        };\n    };\n\n    // Functions to show, hide, and toggle second level items.\n    var showItem = function (element) {\n        var components = getComponents(element);\n\n        // Show this item.\n        components.button.removeClass(buttonClassHidden);\n        components.list.removeClass(navListClassHidden);\n\n        // Switch button content.\n        components.button.html(hideContent);\n\n        // Hide other items.\n        components.others.each(function (i, otherElement) {\n            hideItem(otherElement);\n        });\n    };\n\n    var hideItem = function (element) {\n        var components = getComponents(element);\n\n        // Hide this item.\n        components.button.addClass(buttonClassHidden);\n        components.list.addClass(navListClassHidden);\n\n        // Switch button content.\n        components.button.html(showContent);\n    };\n\n    var toggleItem = function (element) {\n        var components = getComponents(element);\n\n        if (components.button.hasClass(buttonClassHidden)) {\n            return showItem(element);\n        }\n\n        hideItem(element);\n    };\n\n    // Add toggle links to all items with second level lists.\n    lists.each(function (i, listElement) {\n        var list = $(listElement);\n        var item = list.parent();\n        var wrap = list.children('.' + wrapClass);\n\n        // No wrap?\n        if (wrap.length === 0) {\n            wrap = item.children('.' + navLinkClass)\n                .wrap('<div class=\"' + wrapClass + '\">')\n                .parent();\n        }\n\n        // Find button.\n        var button = wrap.children('.' + buttonClass);\n\n        // No button?\n        if (button.length === 0) {\n            button = $(buttonHtml);\n\n            button.addClass(buttonClass);\n            wrap.append(button);\n\n            // Completely default button? Apply completely default styles.\n            if (buttonTemplate.length === 0) {\n                button.addClass(buttonClassDefault);\n            }\n        }\n\n        // Toggle visibility on button click.\n        button.on('click', { button: button }, function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            toggleItem(e.data.button);\n        });\n\n        // Set initial state.\n        list.addClass(navListClassToggle);\n        hideItem(list);\n    });\n\n    // Hide all items on click outside button(s).\n    $('html').on('click', function () {\n        items.each(function (i, itemElement) {\n            hideItem(itemElement);\n        });\n    });\n});\n","// Main navigation toggle on small screens.\n$(function () {\n    // Block class names.\n    var headerClass = ATLAS_PREFIX + 'header';\n\n    // Element class names.\n    var specialClass = headerClass + '__special';\n    var navClass = headerClass + '__nav';\n    var navSpecialClass = headerClass + '__nav-special';\n    var wrapClass = headerClass + '__nav-toggle';\n    var buttonClass = headerClass + '__nav-toggle-button';\n\n    // Class name modifiers.\n    var defaultModifier = '--default';\n    var disabledModifier = '--toggle-disabled';\n    var hiddenModifier = '--hidden';\n    var rightModifier = '--right';\n    var toggleModifier = '--toggle';\n\n    // Full class names with modifiers applied.\n    var buttonClassDefault = buttonClass + defaultModifier;\n    var buttonClassHidden = buttonClass + hiddenModifier;\n    var navClassDisabled = navClass + disabledModifier;\n    var navClassHidden = navClass + hiddenModifier;\n    var wrapClassRight = wrapClass + rightModifier;\n\n    // Template elements.\n    var buttonTemplate = $('#' + ATLAS_PREFIX + 'nav-button-template');\n    var showTemplate = $('#' + ATLAS_PREFIX + 'nav-show-template');\n    var hideTemplate = $('#' + ATLAS_PREFIX + 'nav-hide-template');\n\n    // Elements.\n    var special = $('.' + specialClass);\n    var nav = $('.' + navClass);\n    var navSpecial = $('.' + navSpecialClass);\n    var wrap = $('.' + wrapClass);\n    var button = $('.' + buttonClass);\n\n    // No navigation? Toggle disabled?\n    if (nav.length === 0 || nav.hasClass(navClassDisabled)) {\n        return;\n    }\n\n    // Default show/hide menu content.\n    var showContent = 'Menu';\n    var hideContent = 'Menu';\n\n    // Template-based show/hide menu content.\n    if (showTemplate.length !== 0) {\n        showContent = showTemplate.html();\n    }\n\n    if (hideTemplate.length !== 0) {\n        hideContent = hideTemplate.html();\n    }\n\n    // Insert the toggle button if it does not already exist. Use a template if\n    // one is available; use default values if one is not.\n    if (button.length === 0) {\n        // Create container?\n        if (wrap.length === 0) {\n            wrap = $('<div class=\"' + wrapClass + '\">');\n\n            // Make space for adjacent element?\n            if (special.length !== 0) {\n                wrap.addClass(wrapClassRight);\n            }\n\n            nav.before(wrap);\n        }\n\n        // Create button from template or default values. The default modifer\n        // class should only be applied to completely default buttons, not those\n        // created from templates.\n        button = $('<a href=\"#\" class=\"' + buttonClassDefault + '\">');\n\n        if (buttonTemplate.length !== 0) {\n            button = $(buttonTemplate.html());\n        }\n\n        button.addClass(buttonClass);\n        wrap.append(button);\n    }\n\n    // Functions to show, hide, and toggle the navigation menu.\n    var showNav = function () {\n        nav.removeClass(navClassHidden);\n        button.removeClass(buttonClassHidden);\n        button.html(hideContent);\n    };\n\n    var hideNav = function () {\n        nav.addClass(navClassHidden);\n        button.addClass(buttonClassHidden);\n        button.html(showContent);\n    };\n\n    var toggleNav = function () {\n        if (nav.hasClass(navClassHidden)) {\n            return showNav();\n        }\n\n        hideNav();\n    };\n\n    // Set initial classes.\n    nav.addClass(navClass + toggleModifier);\n    navSpecial.addClass(navSpecialClass + toggleModifier);\n\n    // Set initial visibility.\n    hideNav();\n\n    // Toggle visibility on button click.\n    button.on('click', function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        toggleNav();\n    });\n\n    // Hide on click outside button.\n    $('html').on('click', function () {\n        hideNav();\n    });\n});\n"]}